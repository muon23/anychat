from PySide6.QtWidgets import QDialog, QLineEdit, QLabel

# Import the compiled UI class from the file generated by your File Watcher
# This assumes your File Watcher is converting keys_dialog.ui -> ui_keys_dialog.py
try:
    from ui_keys_dialog import Ui_KeysDialog
except ImportError:
    print("Error: Could not import ui_keys_dialog.py.")
    print("Please ensure your File Watcher is running and has generated this file.")

    class Ui_KeysDialog:
        # Define a fallback class so the app doesn't crash immediately
        def setupUi(self, widget):
            pass

        def __getattr__(self, name):
            print(f"Warning: Tried to access '{name}' on a dummy UI.")
            return None


class KeysDialog(QDialog):
    def __init__(self, key_manager, providers: list, parent=None):
        super().__init__(parent)
        self.key_manager = key_manager

        # --- This is the new, correct initialization ---
        # 1. Create an instance of the compiled UI class
        self.ui = Ui_KeysDialog()
        # 2. Set up the UI (widgets, layouts, etc.) onto this QDialog
        self.ui.setupUi(self)
        # --- End of new initialization ---

        # Store our line edits in a dictionary for easy access
        self.provider_inputs = {}

        # Load current keys
        current_keys = self.key_manager.load_keys()

        # Dynamically create the form fields based on the provider list
        # We can now directly access keyFormLayout from the self.ui object
        if self.ui.keyFormLayout:
            for provider in providers:
                label = QLabel(f"{provider} API Key:")
                key_input = QLineEdit()
                key_input.setText(current_keys.get(provider, ""))
                key_input.setPlaceholderText(f"Enter {provider} key...")

                # Add to our layout
                self.ui.keyFormLayout.addRow(label, key_input)

                # Store the input widget
                self.provider_inputs[provider] = key_input
        else:
            print("Error: 'keyFormLayout' not found on self.ui object.")
            print("Please check your .ui file and re-run the File Watcher.")

        # Connect the dialog's standard buttons (Save/Cancel)
        # The .ui file's "connections" section already connects
        # buttonBox.accepted -> self.accept()
        # buttonBox.rejected -> self.reject()

    def accept(self):
        """
        Called when the user clicks 'Save'.
        Reads all values from the QLineEdits and saves them.
        """
        keys_to_save = {}
        for provider, key_input in self.provider_inputs.items():
            keys_to_save[provider] = key_input.text().strip()

        self.key_manager.save_keys(keys_to_save)
        print("Keys saved.")
        super().accept()  # Close the dialog

    def reject(self):
        """Called when the user clicks 'Cancel'."""
        print("Key saving cancelled.")
        super().reject()  # Close the dialog
